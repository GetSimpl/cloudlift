Outputs:
  CloudliftOptions:
    Description: Options used with cloudlift when building this service
    Value: '{"cloudlift_version": "test-version", "ecr_repo": {"name": "test-service-repo"},
      "notifications_arn": "some", "services": {"DummyFargateRunSidekiqsh": {"command":
      null, "fargate": {"cpu": 256, "memory": 512}, "memory_reservation": 512, "secrets_name":
      "dummy-fargate-config"}, "DummyFargateService": {"command": null, "fargate":
      {"cpu": 256, "memory": 512}, "http_interface": {"container_port": 80, "internal":
      false, "restrict_access_to": ["0.0.0.0/0"], "health_check_path": "/elb-check"},
      "memory_reservation": 512, "secrets_name": "dummy-fargate-config"}}}'
  DummyFargateRunSidekiqshEcsServiceName:
    Description: The ECS name which needs to be entered
    Value: !GetAtt 'DummyFargateRunSidekiqsh.Name'
  DummyFargateRunSidekiqshSecretsName:
    Description: AWS secrets manager name to pull the secrets from
    Value: dummy-fargate-config
  DummyFargateServiceEcsServiceName:
    Description: The ECS name which needs to be entered
    Value: !GetAtt 'DummyFargateService.Name'
  DummyFargateServiceSecretsName:
    Description: AWS secrets manager name to pull the secrets from
    Value: dummy-fargate-config
  ECRRepoName:
    Description: ECR repo to for docker images
    Value: test-service-repo
  StackId:
    Description: The unique ID of the stack. To be supplied to circle CI environment
      variables to validate during deployment.
    Value: !Ref 'AWS::StackId'
  StackName:
    Description: The name of the stack
    Value: !Ref 'AWS::StackName'
Parameters:
  Environment:
    Default: production
    Description: ''
    Type: String
  NotificationSnsArn:
    Default: some
    Description: ''
    Type: String
  PrivateSubnet1:
    Default: subnet-09b6cd23af94861cc
    Description: ''
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Default: subnet-0657bc2faa99ce5f7
    Description: ''
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1:
    Default: subnet-0aeae8fe5e13a7ff7
    Description: ''
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Default: subnet-096377a44ccb73aca
    Description: ''
    Type: AWS::EC2::Subnet::Id
  VPC:
    Default: vpc-00f07c5a6b6c9abdb
    Description: ''
    Type: AWS::EC2::VPC::Id
Resources:
  DummyFargateRunSidekiqsh:
    Properties:
      Cluster: cluster-staging
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 51
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref 'FargateServicestagingDummyFargateRunSidekiqsh'
          Subnets:
            - !Ref 'PrivateSubnet1'
            - !Ref 'PrivateSubnet2'
      TaskDefinition: !Ref 'DummyFargateRunSidekiqshTaskDefinition'
    Type: AWS::ECS::Service
  DummyFargateRunSidekiqshRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns: []
    Type: AWS::IAM::Role
  DummyFargateRunSidekiqshTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Cpu: 0
          Environment:
            - Name: PORT
              Value: '80'
          Essential: 'true'
          Image: 12537612.dkr.ecr.us-west-2.amazonaws.com/dummyFargate-repo:1.1.1
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: staging-logs
              awslogs-region: us-west-2
              awslogs-stream-prefix: DummyFargateRunSidekiqsh
          Memory: 20480
          MemoryReservation: 512
          Name: DummyFargateRunSidekiqshContainer
          Secrets:
            - Name: CLOUDLIFT_INJECTED_SECRETS
              ValueFrom: arn_injected_secrets
      Cpu: '256'
      ExecutionRoleArn: !Ref 'DummyFargateRunSidekiqshTaskExecutionRole'
      Family: stagingDummyFargateRunSidekiqshFamily
      Memory: '512'
      NetworkMode: awsvpc
      PlacementConstraints: []
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref 'DummyFargateRunSidekiqshRole'
    Type: AWS::ECS::TaskDefinition
  DummyFargateRunSidekiqshTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - arn:aws:secretsmanager:us-west-2:12537612:secret:cloudlift-injected/staging/dummyFargate/DummyFargateRunSidekiqsh-??????
                  - arn:aws:secretsmanager:us-west-2:12537612:secret:dummy-fargate-config-??????
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - '*'
          PolicyName: DummyFargateRunSidekiqshTaskExecutionRolePolicy
    Type: AWS::IAM::Role
  DummyFargateService:
    Properties:
      Cluster: cluster-staging
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 45
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: DummyFargateServiceContainer
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroupDummyFargateService'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref 'FargateServicestagingDummyFargateService'
          Subnets:
            - !Ref 'PrivateSubnet1'
            - !Ref 'PrivateSubnet2'
      TaskDefinition: !Ref 'DummyFargateServiceTaskDefinition'
    Type: AWS::ECS::Service
  DummyFargateServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns: []
    Type: AWS::IAM::Role
  DummyFargateServiceTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Cpu: 0
          Environment:
            - Name: PORT
              Value: '80'
          Essential: 'true'
          Image: 12537612.dkr.ecr.us-west-2.amazonaws.com/dummyFargate-repo:1.1.1
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: staging-logs
              awslogs-region: us-west-2
              awslogs-stream-prefix: DummyFargateService
          Memory: 20480
          MemoryReservation: 512
          Name: DummyFargateServiceContainer
          PortMappings:
            - ContainerPort: 80
          Secrets:
            - Name: CLOUDLIFT_INJECTED_SECRETS
              ValueFrom: arn_injected_secrets
      Cpu: '256'
      ExecutionRoleArn: !Ref 'DummyFargateServiceTaskExecutionRole'
      Family: stagingDummyFargateServiceFamily
      Memory: '512'
      NetworkMode: awsvpc
      PlacementConstraints: []
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref 'DummyFargateServiceRole'
    Type: AWS::ECS::TaskDefinition
  DummyFargateServiceTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - arn:aws:secretsmanager:us-west-2:12537612:secret:cloudlift-injected/staging/dummyFargate/DummyFargateService-??????
                  - arn:aws:secretsmanager:us-west-2:12537612:secret:dummy-fargate-config-??????
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - '*'
          PolicyName: DummyFargateServiceTaskExecutionRolePolicy
    Type: AWS::IAM::Role
  ECSServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /
      RoleName: !Sub 'ecs-svc-${AWS::StackName}-${AWS::Region}'
    Type: AWS::IAM::Role
  EcsNoRunningTasksAlarmDummyFargateRunSidekiqsh:
    Properties:
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Alarm if the task count goes to zero, denoting service is
        down
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: cluster-staging
        - Name: ServiceName
          Value: !GetAtt 'DummyFargateRunSidekiqsh.Name'
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      OKActions:
        - !Ref 'NotificationSnsArn'
      Period: 60
      Statistic: SampleCount
      Threshold: '1'
      TreatMissingData: breaching
    Type: AWS::CloudWatch::Alarm
  EcsNoRunningTasksAlarmDummyFargateService:
    Properties:
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Alarm if the task count goes to zero, denoting service is
        down
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: cluster-staging
        - Name: ServiceName
          Value: !GetAtt 'DummyFargateService.Name'
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      OKActions:
        - !Ref 'NotificationSnsArn'
      Period: 60
      Statistic: SampleCount
      Threshold: '1'
      TreatMissingData: breaching
    Type: AWS::CloudWatch::Alarm
  FailedCloudliftDeploymentsDummyFargateRunSidekiqsh:
    Properties:
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Cloudlift deployment timed out
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: cluster-staging
        - Name: ServiceName
          Value: !GetAtt 'DummyFargateRunSidekiqsh.Name'
      EvaluationPeriods: 1
      MetricName: FailedCloudliftDeployments
      Namespace: ECS/DeploymentMetrics
      OKActions:
        - !Ref 'NotificationSnsArn'
      Period: 60
      Statistic: Average
      Threshold: '0'
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
  FailedCloudliftDeploymentsDummyFargateService:
    Properties:
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Cloudlift deployment timed out
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: cluster-staging
        - Name: ServiceName
          Value: !GetAtt 'DummyFargateService.Name'
      EvaluationPeriods: 1
      MetricName: FailedCloudliftDeployments
      Namespace: ECS/DeploymentMetrics
      OKActions:
        - !Ref 'NotificationSnsArn'
      Period: 60
      Statistic: Average
      Threshold: '0'
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
  FargateServicestagingDummyFargateRunSidekiqsh:
    Properties:
      GroupDescription: FargateServicestagingDummyFargateRunSidekiqsh
      GroupName: FargateServicestagingDummyFargateRunSidekiqsh
      SecurityGroupIngress: []
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  FargateServicestagingDummyFargateService:
    Properties:
      GroupDescription: FargateServicestagingDummyFargateService
      GroupName: FargateServicestagingDummyFargateService
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: TCP
          ToPort: 80
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  TargetGroupDummyFargateService:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /elb-check
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref 'VPC'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
