Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - KeyPair
          - Environment
          - MinSize
          - MaxSize
          - InstanceType
          - VPC
          - Subnet1
          - Subnet2
          - NotificationSnsArn
    ParameterLabels:
      Environment:
        default: Enter the environment e.g. dev or staging or sandbox or production
      InstanceType:
        default: Type of instance
      KeyPair:
        default: Select the key with which you want to login to the ec2 instances
      MaxSize:
        default: Max. no. of instances in cluster
      MinSize:
        default: Min. no. of instances in cluster
      NotificationSnsArn:
        default: The SNS topic to which notifactions has to be triggered
      Subnet1:
        default: Enter the ID of the 1st subnet
      Subnet2:
        default: Enter the ID of the 2nd subnet
      VPC:
        default: Enter the VPC in which you want the environment to be setup
Mappings:
  AWSRegionToAMI:
    us-west-2:
      AMI: ami-04bb74f3ffa3aa3e2
Outputs:
  StackId:
    Description: The unique ID of the stack. To be supplied to circle CI environment
      variables to validate during deployment.
    Value: !Ref 'AWS::StackId'
  StackName:
    Description: The name of the stack
    Value: !Ref 'AWS::StackName'
  CloudliftOptions:
    Description: Options used with cloudlift when building this cluster
    Value: '{"env": "test2", "min_instances": "1", "max_instances": "5", "instance_type":
      "m5.xlarge", "key_name": "test2-cluster", "cloudlift_version": "test-version"}'
  VPC:
    Description: VPC in which environment is setup
    Value: !Ref 'test2Vpc'
  PrivateSubnet1:
    Description: ID of private subnet 1
    Value: !Ref 'test2PrivateSubnet1'
  PrivateSubnet2:
    Description: ID of private subnet 2
    Value: !Ref 'test2PrivateSubnet2'
  PublicSubnet1:
    Description: ID of public subnet 1
    Value: !Ref 'test2PublicSubnet1'
  PublicSubnet2:
    Description: ID of public subnet 2
    Value: !Ref 'test2PublicSubnet2'
  AutoScalingGroup:
    Description: AutoScaling group for ECS container instances
    Value: !Ref 'AutoScalingGroup'
  SecurityGroupAlb:
    Description: Security group ID for ALB
    Value: !Ref 'SecurityGroupAlb'
  MinInstances:
    Description: Minimum instances in cluster
    Value: '1'
  MaxInstances:
    Description: Maximum instances in cluster
    Value: '5'
  InstanceType:
    Description: EC2 instance type
    Value: m5.xlarge
  KeyName:
    Description: Key Pair name for accessing the instances
    Value: test2-cluster
Parameters:
  Environment:
    Description: ''
    Type: String
    Default: ''
  KeyPair:
    Description: ''
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''
  MinSize:
    Description: ''
    Type: Number
    Default: '1'
  MaxSize:
    Description: ''
    Type: Number
    Default: '5'
  NotificationSnsArn:
    Description: ''
    Type: String
    Default: arn:aws:sns:us-west-2:388418451245:test2-cluster
  InstanceType:
    Description: ''
    Type: String
    Default: m5.xlarge
Resources:
  test2Vpc:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: category
          Value: services
        - Key: environment
          Value: test2
        - Key: Name
          Value: test2-vpc
    Type: AWS::EC2::VPC
  test2Ig:
    Properties:
      Tags:
        - Key: Name
          Value: test2-internet-gateway
        - Key: environment
          Value: test2
    Type: AWS::EC2::InternetGateway
  test2Attachment:
    Properties:
      InternetGatewayId: !Ref 'test2Ig'
      VpcId: !Ref 'test2Vpc'
    Type: AWS::EC2::VPCGatewayAttachment
  test2Public:
    Properties:
      VpcId: !Ref 'test2Vpc'
      Tags:
        - Key: Name
          Value: test2-public
        - Key: environment
          Value: test2
    Type: AWS::EC2::RouteTable
    DependsOn: test2Vpc
  test2PublicSubnet1:
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.0.0/22
      VpcId: !Ref 'test2Vpc'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: test2-public-1
        - Key: environment
          Value: test2
    Type: AWS::EC2::Subnet
  test2PublicSubnet1Assoc:
    Properties:
      RouteTableId: !Ref 'test2Public'
      SubnetId: !Ref 'test2PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  test2PublicSubnet2:
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.4.0/22
      VpcId: !Ref 'test2Vpc'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: test2-public-2
        - Key: environment
          Value: test2
    Type: AWS::EC2::Subnet
  test2PublicSubnet2Assoc:
    Properties:
      RouteTableId: !Ref 'test2Public'
      SubnetId: !Ref 'test2PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  test2IgRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'test2Ig'
      RouteTableId: !Ref 'test2Public'
    Type: AWS::EC2::Route
  test2Private:
    Properties:
      VpcId: !Ref 'test2Vpc'
      Tags:
        - Key: Name
          Value: test2-private
        - Key: environment
          Value: test2
    Type: AWS::EC2::RouteTable
  test2PrivateSubnet1:
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.8.0/22
      VpcId: !Ref 'test2Vpc'
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: test2-private-1
        - Key: environment
          Value: test2
    Type: AWS::EC2::Subnet
  test2PrivateSubnet1Assoc:
    Properties:
      RouteTableId: !Ref 'test2Private'
      SubnetId: !Ref 'test2PrivateSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  test2PrivateSubnet2:
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.12.0/22
      VpcId: !Ref 'test2Vpc'
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: test2-private-2
        - Key: environment
          Value: test2
    Type: AWS::EC2::Subnet
  test2PrivateSubnet2Assoc:
    Properties:
      RouteTableId: !Ref 'test2Private'
      SubnetId: !Ref 'test2PrivateSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  test2Nat:
    Properties:
      AllocationId: eipalloc-0d11bc40a4f4e9468
      SubnetId: !Ref 'test2PublicSubnet1'
      Tags:
        - Key: Name
          Value: test2-nat-gateway
        - Key: environment
          Value: test2
    Type: AWS::EC2::NatGateway
  test2NatRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'test2Nat'
      RouteTableId: !Ref 'test2Private'
    Type: AWS::EC2::Route
  DBSubnetGroup:
    Properties:
      DBSubnetGroupName: test2-subnet
      Tags:
        - Key: category
          Value: services
        - Key: environment
          Value: test2
      DBSubnetGroupDescription: test2 subnet group
      SubnetIds:
        - !Ref 'test2PrivateSubnet1'
        - !Ref 'test2PrivateSubnet2'
    Type: AWS::RDS::DBSubnetGroup
  ElasticacheSubnetGroup:
    Properties:
      CacheSubnetGroupName: test2-subnet
      Description: test2 subnet group
      SubnetIds:
        - !Ref 'test2PrivateSubnet2'
        - !Ref 'test2PrivateSubnet1'
    Type: AWS::ElastiCache::SubnetGroup
  test2LogGroup:
    Properties:
      LogGroupName: test2-logs
      RetentionInDays: 365
    Type: AWS::Logs::LogGroup
  Cluster:
    Properties:
      ClusterName: !Ref 'AWS::StackName'
    Type: AWS::ECS::Cluster
  ECSRole:
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      RoleName: !Sub 'ecs-${AWS::StackName}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
    Type: AWS::IAM::Role
  InstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref 'ECSRole'
    Type: AWS::IAM::InstanceProfile
  SecurityGroupAlb:
    Properties:
      VpcId: !Ref 'test2Vpc'
      GroupDescription: !Sub '${AWS::StackName}-alb'
    Type: AWS::EC2::SecurityGroup
  SecurityGroupEc2Hosts:
    Properties:
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'SecurityGroupAlb'
          IpProtocol: -1
      VpcId: !Ref 'test2Vpc'
      GroupDescription: !Sub '${AWS::StackName}-hosts'
    Type: AWS::EC2::SecurityGroup
  SecurityGroupDatabases:
    Properties:
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'SecurityGroupEc2Hosts'
          IpProtocol: -1
      VpcId: !Ref 'test2Vpc'
      GroupDescription: !Sub '${AWS::StackName}-databases'
    Type: AWS::EC2::SecurityGroup
  LaunchConfiguration:
    Properties:
      UserData: !Base64
        Fn::Sub: "#!/bin/bash\nyum update -y\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init\
          \ -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration\n\
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName}\
          \ --resource AutoScalingGroup\nyum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n\
          systemctl enable amazon-ssm-agent\nsystemctl start amazon-ssm-agent\n"
      IamInstanceProfile: !Ref 'InstanceProfile'
      SecurityGroups:
        - !Ref 'SecurityGroupEc2Hosts'
      InstanceType: !Ref 'InstanceType'
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref 'KeyPair'
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
              mode: '256'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n\
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName}\
                \ --resource LaunchConfiguration\n"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            '01_add_instance_to_cluster':
              command: !Sub "echo \"ECS_CLUSTER=${Cluster}\nECS_RESERVED_MEMORY=256\"\
                \ > /etc/ecs/ecs.config"
  AutoScalingGroup:
    Properties:
      DesiredCapacity: 1
      Tags:
        - PropagateAtLaunch: true
          Value: !Sub '${AWS::StackName} - ECS Host'
          Key: Name
      MinSize: !Ref 'MinSize'
      MaxSize: !Ref 'MaxSize'
      VPCZoneIdentifier:
        - !Ref 'test2PrivateSubnet1'
        - !Ref 'test2PrivateSubnet2'
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy: {}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  AutoScalingPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AutoScalingGroup'
      Cooldown: 300
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
    Type: AWS::AutoScaling::ScalingPolicy
  Ec2HostsHighCPUAlarm:
    Properties:
      EvaluationPeriods: 1
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'AutoScalingGroup'
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Namespace: AWS/EC2
      Period: 60
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: '60'
      MetricName: CPUUtilization
    Type: AWS::CloudWatch::Alarm
  ClusterHighCPUAlarm:
    Properties:
      EvaluationPeriods: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'Cluster'
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Alarm if CPU is too high for cluster.
      Namespace: AWS/ECS
      Period: 300
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: '60'
      MetricName: CPUUtilization
    Type: AWS::CloudWatch::Alarm
  ClusterHighMemoryAlarm:
    Properties:
      EvaluationPeriods: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'Cluster'
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Alarm if memory is too high for cluster.
      Namespace: AWS/ECS
      Period: 300
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: '60'
      MetricName: MemoryUtilization
    Type: AWS::CloudWatch::Alarm
  ClusterHighMemoryReservationAlarm:
    Properties:
      EvaluationPeriods: 1
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'Cluster'
      AlarmActions:
        - !Ref 'AutoScalingPolicy'
      AlarmDescription: Alarm if memory reservation is over 75% for cluster.
      Namespace: AWS/ECS
      Period: 300
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: '75'
      MetricName: MemoryReservation
    Type: AWS::CloudWatch::Alarm
  ClusterHighMemoryReservationUserNotifcationAlarm:
    Properties:
      EvaluationPeriods: 3
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'Cluster'
      AlarmActions:
        - !Ref 'NotificationSnsArn'
      OKActions:
        - !Ref 'NotificationSnsArn'
      AlarmDescription: Alarm if memory reservation is over 75% for cluster for 15
        minutes.
      Namespace: AWS/ECS
      Period: 300
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: '75'
      MetricName: MemoryReservation
    Type: AWS::CloudWatch::Alarm
